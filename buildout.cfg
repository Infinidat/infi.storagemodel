[buildout]
include-site-packages = false
relative-paths = true
unzip = true
newest = false
prefer-final = false
download-cache = .cache
develop = .
parts = 

[project]
name = infi.storagemodel
homepage = https://github.com/Infinidat/${project:name}
namespace_packages = ['infi']
install_requires = [
	'Brownie',
	'infi.asi',
	'infi.cwrap',
	'infi.devicemanager',
	'infi.diskmanagement',
	'infi.dtypes.hctl',
	'infi.dtypes.iqn',
	'infi.dtypes.wwn',
	'infi.exceptools',
	'infi.hbaapi',
	'infi.instruct',
	'infi.iscsiapi',
	'infi.mount-utils',
	'infi.mountoolinux',
	'infi.multipathtools',
	'infi.os-info',
	'infi.parted',
	'infi.pyutils',
	'infi.sgutils',
	'infi.traceback',
	'infi.wioctl',
	'infi.wmpio',
	'setuptools',
	'six'
	]
version_file = src/infi/storagemodel/__version__.py
description = A high-level library for traversing the OS storage model.
long_description = A high-level cross-platform abstraction of the OS storage stack (LUNs, disks, volumes, etc).
console_scripts = ['devlist = infi.storagemodel.examples:devlist', 'rescan_scsi_bus = infi.storagemodel.linux.rescan_scsi_bus:console_script']
gui_scripts = []
package_data = []
upgrade_code = None
product_name = ${project:name}
post_install_script_name = None
pre_uninstall_script_name = None

[isolated-python]
recipe = infi.recipe.python
version = v2.7.8.8

[setup.py]
recipe = infi.recipe.template.version
input = setup.in
output = setup.py

[__version__.py]
recipe = infi.recipe.template.version
output = ${project:version_file}

[development-scripts]
dependent-scripts = true
recipe = infi.recipe.console_scripts
eggs = ${project:name}
	ipython
	nose
	mock
	coverage
	infi.unittest
	infi.traceback
	Sphinx
	snort
	contextlib2
interpreter = python

[pack]
recipe = infi.recipe.application_packager
company = None

[sublime]
recipe = corneti.recipes.codeintel
eggs = ${development-scripts:eggs}

